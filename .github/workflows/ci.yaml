---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: ci

on:
  workflow_dispatch:
  push:
    branches: [ 'main' ]
    tags:
      - '*'
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - '**.md'
  pull_request:
    branches: [ 'main' ]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - '**.md'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Setup Workflow Tools
        run: brew install ktlint detekt

      - name: Install uv
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6.4.3
        with:
          version: "0.5.30"

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
            python-version: '3.13'

      - name: Lint check
        run: ktlint --reporter=sarif,output=ktlint.sarif --editorconfig .editorconfig ./src/**/*.kt build.gradle.kts

      - name: Code analysis
        run: detekt --config detekt.yaml --input ./src,build.gradle.kts --report sarif:report.sarif

      - name: Upload SARIF to GitHub using the upload-sarif action
        uses: github/codeql-action/upload-sarif@51f77329afa6477de8c49fc9c7046c15b9a4e79d # v3
        if: success() || failure()
        with:
          sarif_file: report.sarif

  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    needs: [lint]
    outputs:
      valid-release: ${{ steps.image-version.outputs.valid-release }}
      version: ${{ steps.image-version.outputs.semantic }}
      images: ${{ steps.bake-options.outputs.targets }}
      original-tag: ${{ steps.input-version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Set input version
        id: input-version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Get semantic version
        uses: ./.github/actions/image-versions
        id: image-version
        with:
          input-version: ${{ steps.input-version.outputs.VERSION }}

      - name: Get Bake Images
        id: bake-options
        uses: ./.github/actions/bake-images

  create-docker-tags:
    name: Create docker tags
    runs-on: ubuntu-latest
    needs: [prepare]
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.prepare.outputs.images) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Setup Vars
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: vars
        with:
          script: |
            core.setOutput('repository-name', '${{ github.event.repository.name }}'.toLowerCase());

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.repository-name }}.${{ matrix.image }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.prepare.outputs.version }}

      - name: Upload Bake Metadata
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.image.name }}-bake-metadata
          path: ${{ steps.meta.outputs.bake-file }}
          if-no-files-found: error
          retention-days: 1

  build-docker:
    name: Build (${{ matrix.image.name }} - ${{ matrix.image.platform }})
    runs-on: ${{ startsWith(matrix.image.platform, 'linux/arm') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    needs: [prepare, create-docker-tags]
    permissions:
      attestations: write
      contents: write
      id-token: write
      packages: write
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.prepare.outputs.images) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Setup Vars
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: vars
        with:
          script: |
            core.setOutput('target-arch', '${{ matrix.image.platform }}'.split('/').pop());
            core.setOutput('target-image', '${{ matrix.image.name }}')

      - name: Login to Github Packages
        if: ${{ needs.prepare.outputs.valid-release == 'true' && github.event_name != 'pull_request' }}
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Download Bake Metadata
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ matrix.image.name }}-bake-metadata
          path: ${{ runner.temp }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Build
        uses: docker/bake-action@37816e747588cb137173af99ab33873600c46ea8 # v6.8.0
        id: bake
        env:
          TAG_BASE: ghcr.io/${{ github.repository_owner }}
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ runner.temp }}/docker-metadata-action-bake.json
          set: |
            *.args.VENDOR=${{ github.repository_owner }}
            *.labels.org.opencontainers.image.title=${{ steps.vars.outputs.target-image }}
            *.labels.org.opencontainers.image.url=https://ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.target-image }}
            *.labels.org.opencontainers.image.version=${{ needs.prepare.outputs.version || github.sha }}
            *.labels.org.opencontainers.image.revision=${{ github.sha }}
            *.labels.org.opencontainers.image.vendor=${{ github.repository_owner }}
            ${{ needs.prepare.outputs.valid-release == 'true' && github.event_name != 'pull_request' && format('*.output=type=image,name=ghcr.io/{0}/{1},push-by-digest=true,name-canonical=true,push=true', github.repository_owner, steps.vars.outputs.target-image) || '*.output=type=docker' }}
            *.platform=${{ matrix.image.platform }}
            *.tags=
          targets: ${{ matrix.image.name }}

      - if: ${{ needs.prepare.outputs.valid-release == 'true' && github.event_name != 'pull_request' }}
        name: Export Digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          DIGEST=$(echo '${{ steps.bake.outputs.metadata }}' | jq -r '.${{ matrix.image.name }}."containerimage.digest"')
          touch "${{ runner.temp }}/digests/${DIGEST#sha256:}"

      - if: ${{ needs.prepare.outputs.valid-release == 'true' && github.event_name != 'pull_request' }}
        name: Upload Digest
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.image.name }}-digests-${{ steps.vars.outputs.target-arch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  release:
    if: ${{ needs.prepare.outputs.valid-release == 'true' && github.event_name != 'pull_request' }}
    name: Release
    runs-on: ubuntu-latest
    needs: ["prepare", "create-docker-tags", "build-docker"]
    permissions:
      contents: write
      id-token: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.prepare.outputs.images) }}
    outputs:
      digest: ${{ steps.digest.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Setup Vars
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: vars
        with:
          script: |
            core.setOutput('target-image', '${{ matrix.image.name }}')

      - name: Download Bake Metadata
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ matrix.image.name }}-bake-metadata
          path: ${{ runner.temp }}

      - name: Download Digests
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: ${{ runner.temp }}/digests
          pattern: ${{ github.event.repository.name }}-${{ matrix.image.name }}-digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Create Manifest List and Push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create \
              $(jq --raw-output --compact-output '.target."docker-metadata-action".tags | map(select(startswith("ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.target-image }}")) | "-t " + .) | join(" ")' ${{ runner.temp }}/docker-metadata-action-bake.json) \
              $(printf 'ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.target-image }}@sha256:%s ' *)

      - name: Inspect Image
        run: |
          docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.target-image }}:$(jq --raw-output '.target."docker-metadata-action".args.DOCKER_META_VERSION' ${{ runner.temp }}/docker-metadata-action-bake.json)

      - name: Export Digest
        id: digest
        run: |
          TAG=$(jq --raw-output '.target."docker-metadata-action".args.DOCKER_META_VERSION' ${{ runner.temp }}/docker-metadata-action-bake.json)
          DIGEST=$(docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.target-image }}:${TAG} --format '{{ json . }}' | jq --raw-output '.manifest.digest')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

      - name: Generate Token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: ["release"]
    permissions:
      contents: write
    outputs:
      digest: ${{ steps.digest.outputs.digest }}
    steps:
      - name: Create Release
        shell: bash
        continue-on-error: true
        env:
          GITHUB_TOKEN: "${{ steps.app-token.outputs.token }}"
        run: |
          gh release create "${{ needs.prepare.outputs.original-tag }}" \
              --repo="${GITHUB_REPOSITORY}" \
              --title="${{ needs.prepare.outputs.original-tag }}" \
              --generate-notes

  attest:
    if: ${{ needs.prepare.outputs.valid-release == 'true' && github.event_name != 'pull_request' }}
    name: Attest
    needs: ["prepare", "release"]
    runs-on: ubuntu-latest
    permissions:
      attestations: write
      contents: write
      id-token: write
      packages: write
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.prepare.outputs.images) }}
    steps:
      - name: Setup Vars
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: vars
        with:
          script: |
            core.setOutput('target-image', '${{ matrix.image.name }}')

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Upload Dependency Snapshot
        uses: anchore/sbom-action@7b36ad622f042cab6f59a75c2ac24ccb256e9b45 # v0.20.4
        with:
          dependency-snapshot: true
          image: ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.target-image }}@${{ needs.release.outputs.digest }}

      - name: Attestation
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          push-to-registry: true
          subject-name: ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.target-image }}
          subject-digest: ${{ needs.release.outputs.digest }}

      - name: Verify Attestation
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh attestation verify --repo ${{ github.repository }} oci://ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.target-image }}@${{ needs.release.outputs.digest }}
