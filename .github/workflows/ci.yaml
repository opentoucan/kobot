---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: ci

on:
  workflow_dispatch:
  push:
    branches: [ 'main' ]
    tags:
      - '*'
    paths:
      - 'src/**'
      - '*.kts'
      - 'Dockerfile'
      - 'docker-bake.hcl'
      - 'detekt.yaml'
  pull_request:
    branches: [ 'main' ]
    paths:
      - 'src/**'
      - '*.kts'
      - 'Dockerfile'
      - 'docker-bake.hcl'
      - 'detekt.yaml'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: Setup Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Setup Workflow Tools
        run: brew install ktlint detekt

      - name: Install uv
        uses: astral-sh/setup-uv@85856786d1ce8acfbcc2f13a5f3fbd6b938f9f41 # v7.1.2
        with:
          version: "0.9.6"

      - name: Setup Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
            python-version: '3.14'

      - name: Lint check
        run: ktlint --reporter=sarif,output=ktlint.sarif --editorconfig .editorconfig ./src/**/*.kt build.gradle.kts

      - name: Code analysis
        run: detekt --config detekt.yaml --input ./src,build.gradle.kts --report sarif:report.sarif

      - name: Upload SARIF to GitHub using the upload-sarif action
        uses: github/codeql-action/upload-sarif@5fe9434cd24fe243e33e7f3305f8a5b519b70280 # v4
        if: success() || failure()
        with:
          sarif_file: report.sarif

  prepare:
    name: Prepare
    needs: ["lint"]
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.bake-images.outputs.images }}
      version: ${{ steps.image-version.outputs.semantic }}
      valid-release: ${{ steps.image-version.outputs.valid-release == 'true' }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          persist-credentials: false

      - name: Get Bake Images
        id: bake-images
        uses: ./.github/actions/bake-images

      - name: Set input version
        id: input-version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Get semantic version
        uses: ./.github/actions/image-versions
        id: image-version
        with:
          input-version: ${{ steps.input-version.outputs.VERSION }}

  build:
    name: Build
    needs: ["prepare"]
    uses: ./.github/workflows/image-builder.yaml
    permissions:
      attestations: write
      contents: write
      id-token: write
      packages: write
      security-events: write
    secrets: inherit
    strategy:
      matrix:
        image: ${{ fromJSON(needs.prepare.outputs.images) }}
      fail-fast: false
      max-parallel: 4
    with:
      image: ${{ matrix.image }}
      version: ${{ needs.prepare.outputs.version }}
      release: ${{ needs.prepare.outputs.valid-release && github.event_name != 'pull_request' }}

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: ["build"]
    if: ${{ needs.prepare.outputs.valid-release && github.event_name != 'pull_request' }}
    permissions:
      contents: write
    outputs:
      digest: ${{ steps.digest.outputs.digest }}
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Create Release
        shell: bash
        continue-on-error: true
        env:
          GITHUB_TOKEN: "${{ steps.app-token.outputs.token }}"
        run: |
          gh release create "${{ needs.prepare.outputs.original-tag }}" \
              --repo="${GITHUB_REPOSITORY}" \
              --title="${{ needs.prepare.outputs.original-tag }}" \
              --generate-notes
